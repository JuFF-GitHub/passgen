#!/usr/bin/env bash

# Brief:
# Generate random looking passwords deterministically from string passed as parameter.
# Password is generated using HashCash-like PoW, hence should be somewhat hack-proof.
# Time required to generate a password varies widely based on parameter: ~0.2-2s
# Password is bound to device.

# Usage: ./passgen <text you can remember> [<number of characters>]
#===================================================

hash_of(){
  sha512sum <(echo "${1}") | awk '{print $1}'
}; export -f hash_of

hash_to_base64(){
  local hash_hex="${1}"
  echo "${hash_hex}" | xxd -r -p | base64 -w 0
}; export -f hash_to_base64

input="${1}"
width="${2:-8}"

input_hash="$(hash_of "${input}_${width}")"
salt="$(hash_of "${input_hash}_$(cat /sys/class/net/eth0/address)")" # Using MAC address

nonce=0

until [[ "${final_hash}" == 00* ]];do
  nonce_hash="$(hash_of "${nonce}")"
  final_hash="$(hash_of "${salt}_${nonce_hash}")"
  ((nonce++))
done

base64_full="$(hash_to_base64 "${final_hash}")"
base64_unpadded="${base64_full%%=*}"
unpadded_length="${#base64_unpadded}"
if ((width>=unpadded_length));then
  passwd="${base64_unpadded}"
else
  offset="-${width}"
  passwd="${base64_unpadded: ${offset}:${width}}"
fi

# Now putting in special characters to comply with requirements: #, @, _, 9, A, z
# TODO: Polish required. Otherwise two different replacements may occur at same insert_at
RANDOM="${nonce}" # Seeding PRNG

insert_at="$((RANDOM%width+1))" # +1 avoids 0
passwd="$(echo "${passwd}" | sed s/./@/${insert_at})"

insert_at="$((RANDOM%width+1))"
passwd="$(echo "${passwd}" | sed s/./#/${insert_at})"

insert_at="$((RANDOM%width+1))"
passwd="$(echo "${passwd}" | sed s/./_/${insert_at})"

insert_at="$((RANDOM%width+1))"
passwd="$(echo "${passwd}" | sed s/./9/${insert_at})"

insert_at="$((RANDOM%width+1))"
passwd="$(echo "${passwd}" | sed s/./A/${insert_at})"

insert_at="$((RANDOM%width+1))"
passwd="$(echo "${passwd}" | sed s/./z/${insert_at})"

echo "${passwd}"
